// +build ignore

// gen-fields generate field names for API calls that accepts a list of object
// field names to return.
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"text/template"
)

var (
	verbose  = flag.Bool("verbose", false, "Print verbose log messages")
	typeName = flag.String("type", "", "Name of the struct to process (required)")
	path     = flag.String("path", ".", "Path to Go package of interest")

	sourceTmpl = template.Must(template.New("source").Parse(source))
)

func logf(fmt string, args ...interface{}) {
	if *verbose {
		log.Printf(fmt, args...)
	}
}

func usage() {
	fmt.Printf("Usage:\n")
	fmt.Printf("\tgen-fields [-verbose] -type T [-path P]\n")
}

func sourceFilter(fi os.FileInfo) bool {
	return !strings.HasSuffix(fi.Name(), "_test.go")
}

func main() {
	flag.Usage = usage
	flag.Parse()

	if len(*typeName) == 0 {
		usage()
		os.Exit(2)
	}

	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, *path, sourceFilter, 0)
	if err != nil {
		log.Fatal(err)
	}

	for pkgName, pkg := range pkgs {
		g := &generator{
			filename: filepath.Join(*path, strings.ToLower(*typeName)+"_fields.go"),
			Typename: *typeName,
			Package:  pkgName,
		}
		for filename, f := range pkg.Files {
			logf("Processing %s...", filename)
			ast.Inspect(f, g.processFile)
		}
		if err := g.generate(); err != nil {
			log.Fatal(err)
		}
	}
}

type structField struct {
	Name     string
	JSONName string
}

type generator struct {
	filename string
	Typename string
	Package  string
	Fields   []structField
}

func (g *generator) processFile(x ast.Node) bool {
	ts, ok := x.(*ast.TypeSpec)
	if !ok {
		return true
	}
	if ts.Name.Name != g.Typename {
		return true
	}
	st, ok := ts.Type.(*ast.StructType)
	if !ok {
		return true
	}
	for _, field := range st.Fields.List {
		stag := reflect.StructTag(strings.Trim(field.Tag.Value, "`"))
		tag := stag.Get("json")
		if tag == "" || tag == "-" {
			tag = stag.Get("field")
		}
		logf("tag %q %q", field.Tag.Value, tag)
		if tag == "" {
			continue
		}

		g.Fields = append(g.Fields, structField{
			Name:     field.Names[0].Name,
			JSONName: tag,
		})
	}

	return false
}

func (g *generator) generate() error {
	logf("fields %+v", g.Fields)
	if len(g.Fields) == 0 {
		logf("No fields to %s, skipping...", g.Typename)
	}

	var buf bytes.Buffer
	if err := sourceTmpl.Execute(&buf, g); err != nil {
		return err
	}
	clean, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	logf("Writing %v...", g.filename)
	return ioutil.WriteFile(g.filename, clean, 0644)
}

const source = `// Code generated by gen-fields; DO NOT EDIT.

package {{ .Package }}

// {{ .Typename }}Field is a field of {{ .Typename }}
type {{ .Typename }}Field string

const (
{{- range .Fields }}
{{ $.Typename }}Field{{ .Name }} {{ $.Typename }}Field = "{{ .JSONName }}"
{{- end }}
)

var all{{ .Typename }}Fields = []{{ .Typename }}Field{
	{{- range .Fields }}
	{{ $.Typename }}Field{{ .Name }},
	{{- end }}
}
`
